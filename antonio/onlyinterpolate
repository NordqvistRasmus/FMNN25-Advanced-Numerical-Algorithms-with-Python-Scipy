import numpy as np
import matplotlib.pyplot
import scipy as sp

def interpol(points):
        d = points #Our interpolationpoints
        knots = np.linspace(0.,1.,len(d)-2)
        knots = np.concatenate([[0,0],knots,[1,1]])

        grevabs=np.zeros([len(knots)-2])
        for i in range(len(knots)-2):
            grevabs[i]=(knots[i]+knots[i+1]+knots[i+2])/3 #Our Greville abscissae
        
        grevabs[-1] =.99 #why is this needed?
    
        VanderMatrix = np.zeros((len(grevabs),len(grevabs))) #Empty matrix for our A in Ax=b

        for i in range(len(grevabs)):
            for j in range(len(grevabs)):
                controlBase = np.zeros([len(knots)-2,2]) #For creating our b-spline basis
                controlBase[j]=[1,1]
                bspline=CubicSpline(controlBase,knots) #Creates the b-spline base
                u=(np.array([grevabs[i]])) 
                VanderMatrix[i,j] = bspline(u)[0] #Evalues the point u using our bspline

                
        x = sp.linalg.solve(VanderMatrix,d[:,0]) #Solves for our vector of x coords
        
        y = sp.linalg.solve(VanderMatrix,d[:,1]) ##Solves for our vector of y coords
    
        controlpoints = np.zeros((len(x),2))
    
        for i in range(len(x)): #Gatheres the coordinates for returning as controlpoints
            controlpoints[i,0]=x[i]
            controlpoints[i,1]=y[i]
        return controlpoints #returns controlpoints
     
def interpolate():
    #points=np.array([[-10,5],[ -9,-3],[ -8,5],[ -7,-2],[ 6,8],[5,-5],[4,1],[3,-7],[0,7],[1,-3]])
    points=np.array([[0,3],[3,6],[5.5,6.5],[4,0],[2,-3],[0,-6],
                     [-2,-3],[-4,0],[-5.5,6.5],[-3,5.5],[0,3],[0,3]]) 
    
    deBoorPoints=CubicSpline.interpol(points)
    
    knots = np.linspace(0.,1.,len(deBoorPoints)-2)
    KnotSeq = np.concatenate([[0,0],knots,[1,1]])
    
    Values = CubicSpline(deBoorPoints,KnotSeq)
    u = np.linspace(0,0.999,100)
    Values(u)
    Values.plot()

interpolate()
